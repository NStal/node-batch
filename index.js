// Generated by CoffeeScript 1.6.3
(function() {
  var async, e, fs, handlerScript, listPath, panic, path, scriptPath, usageError;

  require("coffee-script");

  fs = require("fs");

  path = require("path");

  async = require("async");

  exports.batchSolve = function(handler, listpath, option) {
    var fail, file, lines, results, success;
    if (option == null) {
      option = {};
    }
    file = fs.readFileSync(listpath, "utf8");
    lines = file.split("\n").map(function(item) {
      return item.trim();
    });
    lines = lines.filter(function(item) {
      return item && item[0] !== "#";
    });
    results = [];
    success = 0;
    fail = 0;
    return async.eachLimit(lines, 1, (function(line, done) {
      return handler(line, function(err) {
        if (err) {
          results.push("#fail::" + line);
          fail++;
        } else {
          results.push("#success::" + line);
          success++;
        }
        return done();
      });
    }), function(err) {
      fs.writeFileSync(listpath, new Buffer(results.join("\n\r")));
      if (option.callback) {
        return option.callback(null, {
          success: success,
          fail: fail
        });
      }
    });
  };

  if (!module.parent) {
    usageError = function() {
      console.log("usage " + process.argv[0] + " " + process.argv[1] + " <script path> <list path>");
      return process.exit(0);
    };
    panic = function() {
      console.log.apply(console, arguments);
      return process.exit(1);
    };
    scriptPath = process.argv[2];
    listPath = process.argv[3];
    if (!scriptPath || !listPath) {
      usageError();
    }
    scriptPath = path.join(path.resolve("./"), scriptPath);
    if (!fs.existsSync(scriptPath)) {
      panic("script " + scriptPath + " not exists");
    }
    if (!fs.existsSync(listPath)) {
      panic("list " + listPath + " not exists");
    }
    try {
      handlerScript = require(scriptPath);
    } catch (_error) {
      e = _error;
      panic("invalid script " + (e.toString()));
    }
    if (typeof handlerScript.handle !== "function") {
      panic("script's " + scriptPath + " handle method is not a function");
    }
    exports.batchSolve(handlerScript.handle, listPath, {
      callback: function(err, result) {
        console.log("success:", result);
        return console.log("fail:", fail);
      }
    });
  }

}).call(this);
